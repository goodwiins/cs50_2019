{"filter":false,"title":"application.py","tooltip":"~/workspace/pset7/application.py","undoManager":{"mark":-1,"position":-1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":201,"column":0},"action":"remove","lines":["import os","","from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session, url_for","from flask_session import Session","from tempfile import mkdtemp","from werkzeug.exceptions import default_exceptions","from werkzeug.security import check_password_hash, generate_password_hash","from passlib.apps import custom_app_context as pwd_context","from pytz import timezone","","from helpers import apology, login_required, lookup, usd","","# Configure application","app = Flask(__name__)","","# Ensure templates are auto-reloaded","app.config[\"TEMPLATES_AUTO_RELOAD\"] = True","","# Ensure responses aren't cached","@app.after_request","def after_request(response):","    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","    response.headers[\"Expires\"] = 0","    response.headers[\"Pragma\"] = \"no-cache\"","    return response","","# Custom filter","app.jinja_env.filters[\"usd\"] = usd","","# Configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = mkdtemp()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# Configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","","@app.route(\"/\")","@login_required","def index():","    \"\"\"Show portfolio of stocks\"\"\"","    return apology(\"TODO\")","","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock.\"\"\"","    if request.method == \"POST\":","        # check if valid input","        try:","            symbol = lookup(request.form.get(\"symbol\"))","            shares = int(request.form.get(\"shares\"))","        except:","            return apology(\"enter some input\")","","        # if symbol is empty return apology","        if not symbol:","            return apology(\"enter a valid symbol\")","","        # if shares is empty","        if not shares or shares <= 0:","            return apology(\"enter the quantity of shares\")","","        # if can't afford to buy then error","        # get cash from db","        cashOnHand = db.execute(\"SELECT cash FROM users WHERE id=:user_id;\", user_id=session[\"user_id\"])","        cashOnHand = int(cashOnHand[0]['cash'])","        if (shares * symbol['price']) > cashOnHand:","            return apology(\"can't afford\")","        else:","            db.execute(\"INSERT INTO transactions (symbol, quantity, price, u_id) VALUES (:symbol, :quantity, :price, :u_id);\", \\","            symbol=symbol['symbol'], quantity=shares, price=symbol['price'], u_id=session[\"user_id\"])","            # update cash (define old_balance)","            db.execute(\"UPDATE users SET cash=cash-:total_price WHERE id=:user_id;\", total_price=shares*symbol['price'], \\","            user_id=session[\"user_id\"])","            return redirect(url_for(\"index\"))","","    else:","        return render_template(\"buy.html\")","@app.route(\"/history\")","@login_required","def history():","    \"\"\"Show history of transactions\"\"\"","    return apology(\"TODO\")","","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in.\"\"\"","","    # forget any user_id","    session.clear()","","    # if user reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"Must provide username\")","","        # ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"Must provide password\")","","        # query database for username","        rows = db.execute(\"SELECT * FROM users \\","                           WHERE username = :username\", \\","                           username=request.form.get(\"username\"))","","        # ensure username exists and password is correct","        if len(rows) != 1 or not pwd_context.verify(request.form.get(\"password\"), rows[0][\"hash\"]):","            return apology(\"invalid username and/or password\")","","        # remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # redirect user to home page","        return redirect(url_for(\"index\"))","","    # else if user reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out\"\"\"","","    # Forget any user_id","    session.clear()","","    # Redirect user to login form","    return redirect(url_for(\"login\"))","","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","","    if request.method == \"POST\":","        \"\"\"Get stock quote.\"\"\"","        if not request.form.get(\"symbol\"):","            return apology(\"symbol required\")","","        quote = lookup(request.form.get(\"symbol\"))","        if quote == None:","            return apology(\"symbol not recognised\")","        else:","            return render_template(\"stock.html\", quote=quote)","","    else:","        return render_template(\"quote.html\")","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","    \"\"\"Register user.\"\"\"","","    if request.method == \"POST\":","","        # ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"Must provide username\")","","        # ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"Must provide password\")","","        # ensure password and verified password is the same","        elif request.form.get(\"password\") != request.form.get(\"password_c\"):","          return apology(\"password doesn't match\")","","","        result = db.execute(\"INSERT INTO users (username, hash) VALUES(:username, :hash)\", username=request.form.get(\"username\"), hash=pwd_context.hash(request.form.get(\"password\")))","        if not result:","            return apology(\"Username already exist\")","            session[\"user_id\"] = result","        return redirect(url_for(\"index\"))","    else:","        return render_template(\"register.html\")","        # insert the new user into users, storing the hash of the user's passwor","        # remember which user has logged in","        # redirect user to home page","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock\"\"\"","    return apology(\"TODO\")","","","def errorhandler(e):","    \"\"\"Handle error\"\"\"","    return apology(e.name, e.code)","","","# listen for errors","for code in default_exceptions:","    app.errorhandler(code)(errorhandler)",""],"id":1051},{"start":{"row":0,"column":0},"end":{"row":348,"column":40},"action":"insert","lines":["from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session, url_for","from flask_session import Session","from tempfile import mkdtemp","from werkzeug.exceptions import default_exceptions","from werkzeug.security import check_password_hash, generate_password_hash","","from helpers import apology, login_required, lookup, usd","","# Configure application","app = Flask(__name__)","","# Ensure responses aren't cached","","","@app.after_request","def after_request(response):","    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","    response.headers[\"Expires\"] = 0","    response.headers[\"Pragma\"] = \"no-cache\"","    return response","","","# Custom filter","app.jinja_env.filters[\"usd\"] = usd","","# Configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = mkdtemp()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# Configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","","@app.route(\"/\")","@login_required","def index():","    \"\"\"Show portfolio of stocks\"\"\"","","    # look up the current user","    users = db.execute(\"SELECT cash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])","    stocks = db.execute(","        \"SELECT symbol, SUM(shares) as total_shares FROM transactions WHERE user_id = :user_id GROUP BY symbol HAVING total_shares > 0\", user_id=session[\"user_id\"])","    quotes = {}","","    for stock in stocks:","        quotes[stock[\"symbol\"]] = lookup(stock[\"symbol\"])","","    cash_remaining = users[0][\"cash\"]","    total = cash_remaining","","    return render_template(\"portfolio.html\", quotes=quotes, stocks=stocks, total=total, cash_remaining=cash_remaining)","","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock\"\"\"","","    if request.method == \"POST\":","        quote = lookup(request.form.get(\"symbol\"))","","        # Check if the symbol exists","        if quote == None:","            return apology(\"invalid symbol\", 400)","","        # Check if shares was a positive integer","        try:","            shares = int(request.form.get(\"shares\"))","        except:","            return apology(\"shares must be a positive integer\", 400)","","        # Check if # of shares requested was 0","        if shares <= 0:","            return apology(\"can't buy less than or 0 shares\", 400)","","        # Query database for username","        rows = db.execute(\"SELECT cash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])","","        # How much $$$ the user still has in her account","        cash_remaining = rows[0][\"cash\"]","        price_per_share = quote[\"price\"]","","        # Calculate the price of requested shares","        total_price = price_per_share * shares","","        if total_price > cash_remaining:","            return apology(\"not enough funds\")","","        # Book keeping (TODO: should be wrapped with a transaction)","        db.execute(\"UPDATE users SET cash = cash - :price WHERE id = :user_id\", price=total_price, user_id=session[\"user_id\"])","        db.execute(\"INSERT INTO transactions (user_id, symbol, shares, price_per_share) VALUES(:user_id, :symbol, :shares, :price)\",","                   user_id=session[\"user_id\"],","                   symbol=request.form.get(\"symbol\"),","                   shares=shares,","                   price=price_per_share)","","        flash(\"Bought!\")","","        return redirect(url_for(\"index\"))","","    else:","        return render_template(\"buy.html\")","","","@app.route(\"/history\")","@login_required","def history():","    \"\"\"Show history of transactions\"\"\"","","    transactions = db.execute(","        \"SELECT symbol, shares, price_per_share, created_at FROM transactions WHERE user_id = :user_id ORDER BY created_at ASC\", user_id=session[\"user_id\"])","","    return render_template(\"history.html\", transactions=transactions)","","","@app.route(\"/funds/add\", methods=[\"GET\", \"POST\"])","@login_required","def add_funds():","","    if request.method == \"POST\":","        try:","            amount = float(request.form.get(\"amount\"))","        except:","            return apology(\"amount must be a real number\", 400)","","        db.execute(\"UPDATE users SET cash = cash + :amount WHERE id = :user_id\", user_id=session[\"user_id\"], amount=amount)","","        return redirect(url_for(\"index\"))","    else:","        return render_template(\"add_funds.html\")","","","@app.route(\"/change_password\", methods=[\"GET\", \"POST\"])","@login_required","def change_password():","    \"\"\"Allow user to change her password\"\"\"","","    if request.method == \"POST\":","","        # Ensure current password is not empty","        if not request.form.get(\"current_password\"):","            return apology(\"must provide current password\", 400)","","        # Query database for user_id","        rows = db.execute(\"SELECT hash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])","","        # Ensure current password is correct","        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"current_password\")):","            return apology(\"invalid password\", 400)","","        # Ensure new password is not empty","        if not request.form.get(\"new_password\"):","            return apology(\"must provide new password\", 400)","","        # Ensure new password confirmation is not empty","        elif not request.form.get(\"new_password_confirmation\"):","            return apology(\"must provide new password confirmation\", 400)","","        # Ensure new password and confirmation match","        elif request.form.get(\"new_password\") != request.form.get(\"new_password_confirmation\"):","            return apology(\"new password and confirmation must match\", 400)","","        # Update database","        hash = generate_password_hash(request.form.get(\"new_password\"))","        rows = db.execute(\"UPDATE users SET hash = :hash WHERE id = :user_id\", user_id=session[\"user_id\"], hash=hash)","","        # Show flash","        flash(\"Changed!\")","","    return render_template(\"change_password.html\")","","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in\"\"\"","","    # Forget any user_id","    session.clear()","","    # User reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # Ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"must provide username\", 403)","","        # Ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"must provide password\", 403)","","        # Query database for username","        rows = db.execute(\"SELECT * FROM users WHERE username = :username\",","                          username=request.form.get(\"username\"))","","        # Ensure username exists and password is correct","        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"password\")):","            return apology(\"invalid username and/or password\", 403)","","        # Remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # Redirect user to home page","        return redirect(url_for(\"index\"))","","    # User reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out\"\"\"","","    # Forget any user_id","    session.clear()","","    # Redirect user to login form","    return redirect(url_for(\"index\"))","","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","","    if request.method == \"POST\":","        quote = lookup(request.form.get(\"symbol\"))","","        if quote == None:","            return apology(\"invalid symbol\", 400)","","        return render_template(\"quoted.html\", quote=quote)","","    # User reached route via GET (as by clicking a link or via redi)","    else:","        return render_template(\"quote.html\")","","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","    \"\"\"Register user\"\"\"","","    # User reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # Ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"must provide username\", 400)","","        # Ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"must provide password\", 400)","","        # Ensure password and confirmation match","        elif not request.form.get(\"password\") == request.form.get(\"confirmation\"):","            return apology(\"passwords do not match\", 400)","","        # hash the password and insert a new user in the database","        hash = generate_password_hash(request.form.get(\"password\"))","        new_user_id = db.execute(\"INSERT INTO users (username, hash) VALUES(:username, :hash)\",","                                 username=request.form.get(\"username\"),","                                 hash=hash)","","        # unique username constraint violated?","        if not new_user_id:","            return apology(\"username taken\", 400)","","        # Remember which user has logged in","        session[\"user_id\"] = new_user_id","","        # Display a flash message","        flash(\"Registered!\")","","        # Redirect user to home page","        return redirect(url_for(\"index\"))","","    # User reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"register.html\")","","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock\"\"\"","    if request.method == \"POST\":","        quote = lookup(request.form.get(\"symbol\"))","","        # Check if the symbol exists","        if quote == None:","            return apology(\"invalid symbol\", 400)","","        # Check if shares was a positive integer","        try:","            shares = int(request.form.get(\"shares\"))","        except:","            return apology(\"shares must be a positive integer\", 400)","","        # Check if # of shares requested was 0","        if shares <= 0:","            return apology(\"can't sell less than or 0 shares\", 400)","","        # Check if we have enough shares","        stock = db.execute(\"SELECT SUM(shares) as total_shares FROM transactions WHERE user_id = :user_id AND symbol = :symbol GROUP BY symbol\",","                           user_id=session[\"user_id\"], symbol=request.form.get(\"symbol\"))","","        if len(stock) != 1 or stock[0][\"total_shares\"] <= 0 or stock[0][\"total_shares\"] < shares:","            return apology(\"you can't sell less than 0 or more than you own\", 400)","","        # Query database for username","        rows = db.execute(\"SELECT cash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])","","        # How much $$$ the user still has in her account","        cash_remaining = rows[0][\"cash\"]","        price_per_share = quote[\"price\"]","","        # Calculate the price of requested shares","        total_price = price_per_share * shares","","        # Book keeping (TODO: should be wrapped with a transaction)","        db.execute(\"UPDATE users SET cash = cash + :price WHERE id = :user_id\", price=total_price, user_id=session[\"user_id\"])","        db.execute(\"INSERT INTO transactions (user_id, symbol, shares, price_per_share) VALUES(:user_id, :symbol, :shares, :price)\",","                   user_id=session[\"user_id\"],","                   symbol=request.form.get(\"symbol\"),","                   shares=-shares,","                   price=price_per_share)","","        flash(\"Sold!\")","","        return redirect(url_for(\"index\"))","","    else:","        stocks = db.execute(","            \"SELECT symbol, SUM(shares) as total_shares FROM transactions WHERE user_id = :user_id GROUP BY symbol HAVING total_shares > 0\", user_id=session[\"user_id\"])","","        return render_template(\"sell.html\", stocks=stocks)","","","def errorhandler(e):","    \"\"\"Handle error\"\"\"","    return apology(e.name, e.code)","","","# listen for errors","for code in default_exceptions:","    app.errorhandler(code)(errorhandler)"]}]]},"ace":{"folds":[],"scrolltop":1235,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":201,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":87,"state":"start","mode":"ace/mode/python"}},"timestamp":1541525150481,"hash":"55bd6551b08c26e0266bf7d94ea4d385b9f8408f"}