{"changed":false,"filter":false,"title":"application.py","tooltip":"~/workspace/pset7/finance/application.py","value":"from cs50 import SQL\nfrom flask import Flask, flash, redirect, render_template, request, session, url_for\nfrom flask_session import Session\nfrom tempfile import mkdtemp\nfrom werkzeug.exceptions import default_exceptions\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom helpers import apology, login_required, lookup, usd\n\n# Configure application\napp = Flask(__name__)\n\n# Ensure responses aren't cached\n\n\n@app.after_request\ndef after_request(response):\n    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"\n    response.headers[\"Expires\"] = 0\n    response.headers[\"Pragma\"] = \"no-cache\"\n    return response\n\n\n# Custom filter\napp.jinja_env.filters[\"usd\"] = usd\n\n# Configure session to use filesystem (instead of signed cookies)\napp.config[\"SESSION_FILE_DIR\"] = mkdtemp()\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n# Configure CS50 Library to use SQLite database\ndb = SQL(\"sqlite:///finance.db\")\n\n\n@app.route(\"/\")\n@login_required\ndef index():\n    \"\"\"Show portfolio of stocks\"\"\"\n\n    # look up the current user\n    users = db.execute(\"SELECT cash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])\n    stocks = db.execute(\n        \"SELECT symbol, SUM(shares) as total_shares FROM transactions WHERE user_id = :user_id GROUP BY symbol HAVING total_shares > 0\", user_id=session[\"user_id\"])\n    quotes = {}\n\n    for stock in stocks:\n        quotes[stock[\"symbol\"]] = lookup(stock[\"symbol\"])\n\n    cash_remaining = users[0][\"cash\"]\n    total = cash_remaining\n\n    return render_template(\"portfolio.html\", quotes=quotes, stocks=stocks, total=total, cash_remaining=cash_remaining)\n\n\n@app.route(\"/buy\", methods=[\"GET\", \"POST\"])\n@login_required\ndef buy():\n    \"\"\"Buy shares of stock\"\"\"\n\n    if request.method == \"POST\":\n        quote = lookup(request.form.get(\"symbol\"))\n\n        # Check if the symbol exists\n        if quote == None:\n            return apology(\"invalid symbol\", 400)\n\n        # Check if shares was a positive integer\n        try:\n            shares = int(request.form.get(\"shares\"))\n        except:\n            return apology(\"shares must be a positive integer\", 400)\n\n        # Check if # of shares requested was 0\n        if shares <= 0:\n            return apology(\"can't buy less than or 0 shares\", 400)\n\n        # Query database for username\n        rows = db.execute(\"SELECT cash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])\n\n        # How much $$$ the user still has in her account\n        cash_remaining = rows[0][\"cash\"]\n        price_per_share = quote[\"price\"]\n\n        # Calculate the price of requested shares\n        total_price = price_per_share * shares\n\n        if total_price > cash_remaining:\n            return apology(\"not enough funds\")\n\n        # Book keeping (TODO: should be wrapped with a transaction)\n        db.execute(\"UPDATE users SET cash = cash - :price WHERE id = :user_id\", price=total_price, user_id=session[\"user_id\"])\n        db.execute(\"INSERT INTO transactions (user_id, symbol, shares, price_per_share) VALUES(:user_id, :symbol, :shares, :price)\",\n                   user_id=session[\"user_id\"],\n                   symbol=request.form.get(\"symbol\"),\n                   shares=shares,\n                   price=price_per_share)\n\n        flash(\"Bought!\")\n\n        return redirect(url_for(\"index\"))\n\n    else:\n        return render_template(\"buy.html\")\n\n\n@app.route(\"/history\")\n@login_required\ndef history():\n    \"\"\"Show history of transactions\"\"\"\n\n    transactions = db.execute(\n        \"SELECT symbol, shares, price_per_share, created_at FROM transactions WHERE user_id = :user_id ORDER BY created_at ASC\", user_id=session[\"user_id\"])\n\n    return render_template(\"history.html\", transactions=transactions)\n\n\n@app.route(\"/funds/add\", methods=[\"GET\", \"POST\"])\n@login_required\ndef add_funds():\n\n    if request.method == \"POST\":\n        try:\n            amount = float(request.form.get(\"amount\"))\n        except:\n            return apology(\"amount must be a real number\", 400)\n\n        db.execute(\"UPDATE users SET cash = cash + :amount WHERE id = :user_id\", user_id=session[\"user_id\"], amount=amount)\n\n        return redirect(url_for(\"index\"))\n    else:\n        return render_template(\"add_funds.html\")\n\n\n@app.route(\"/change_password\", methods=[\"GET\", \"POST\"])\n@login_required\ndef change_password():\n    \"\"\"Allow user to change her password\"\"\"\n\n    if request.method == \"POST\":\n\n        # Ensure current password is not empty\n        if not request.form.get(\"current_password\"):\n            return apology(\"must provide current password\", 400)\n\n        # Query database for user_id\n        rows = db.execute(\"SELECT hash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])\n\n        # Ensure current password is correct\n        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"current_password\")):\n            return apology(\"invalid password\", 400)\n\n        # Ensure new password is not empty\n        if not request.form.get(\"new_password\"):\n            return apology(\"must provide new password\", 400)\n\n        # Ensure new password confirmation is not empty\n        elif not request.form.get(\"new_password_confirmation\"):\n            return apology(\"must provide new password confirmation\", 400)\n\n        # Ensure new password and confirmation match\n        elif request.form.get(\"new_password\") != request.form.get(\"new_password_confirmation\"):\n            return apology(\"new password and confirmation must match\", 400)\n\n        # Update database\n        hash = generate_password_hash(request.form.get(\"new_password\"))\n        rows = db.execute(\"UPDATE users SET hash = :hash WHERE id = :user_id\", user_id=session[\"user_id\"], hash=hash)\n\n        # Show flash\n        flash(\"Changed!\")\n\n    return render_template(\"change_password.html\")\n\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    \"\"\"Log user in\"\"\"\n\n    # Forget any user_id\n    session.clear()\n\n    # User reached route via POST (as by submitting a form via POST)\n    if request.method == \"POST\":\n\n        # Ensure username was submitted\n        if not request.form.get(\"username\"):\n            return apology(\"must provide username\", 403)\n\n        # Ensure password was submitted\n        elif not request.form.get(\"password\"):\n            return apology(\"must provide password\", 403)\n\n        # Query database for username\n        rows = db.execute(\"SELECT * FROM users WHERE username = :username\",\n                          username=request.form.get(\"username\"))\n\n        # Ensure username exists and password is correct\n        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"password\")):\n            return apology(\"invalid username and/or password\", 403)\n\n        # Remember which user has logged in\n        session[\"user_id\"] = rows[0][\"id\"]\n\n        # Redirect user to home page\n        return redirect(url_for(\"index\"))\n\n    # User reached route via GET (as by clicking a link or via redirect)\n    else:\n        return render_template(\"login.html\")\n\n\n@app.route(\"/logout\")\ndef logout():\n    \"\"\"Log user out\"\"\"\n\n    # Forget any user_id\n    session.clear()\n\n    # Redirect user to login form\n    return redirect(url_for(\"index\"))\n\n\n@app.route(\"/quote\", methods=[\"GET\", \"POST\"])\n@login_required\ndef quote():\n    \"\"\"Get stock quote.\"\"\"\n\n    if request.method == \"POST\":\n        quote = lookup(request.form.get(\"symbol\"))\n\n        if quote == None:\n            return apology(\"invalid symbol\", 400)\n\n        return render_template(\"quoted.html\", quote=quote)\n\n    # User reached route via GET (as by clicking a link or via redi)\n    else:\n        return render_template(\"quote.html\")\n\n\n@app.route(\"/register\", methods=[\"GET\", \"POST\"])\ndef register():\n    \"\"\"Register user\"\"\"\n\n    # User reached route via POST (as by submitting a form via POST)\n    if request.method == \"POST\":\n\n        # Ensure username was submitted\n        if not request.form.get(\"username\"):\n            return apology(\"must provide username\", 400)\n\n        # Ensure password was submitted\n        elif not request.form.get(\"password\"):\n            return apology(\"must provide password\", 400)\n\n        # Ensure password and confirmation match\n        elif not request.form.get(\"password\") == request.form.get(\"confirmation\"):\n            return apology(\"passwords do not match\", 400)\n\n        # hash the password and insert a new user in the database\n        hash = generate_password_hash(request.form.get(\"password\"))\n        new_user_id = db.execute(\"INSERT INTO users (username, hash) VALUES(:username, :hash)\",\n                                 username=request.form.get(\"username\"),\n                                 hash=hash)\n\n        # unique username constraint violated?\n        if not new_user_id:\n            return apology(\"username taken\", 400)\n\n        # Remember which user has logged in\n        session[\"user_id\"] = new_user_id\n\n        # Display a flash message\n        flash(\"Registered!\")\n\n        # Redirect user to home page\n        return redirect(url_for(\"index\"))\n\n    # User reached route via GET (as by clicking a link or via redirect)\n    else:\n        return render_template(\"register.html\")\n\n\n@app.route(\"/sell\", methods=[\"GET\", \"POST\"])\n@login_required\ndef sell():\n    \"\"\"Sell shares of stock\"\"\"\n    if request.method == \"POST\":\n        quote = lookup(request.form.get(\"symbol\"))\n\n        # Check if the symbol exists\n        if quote == None:\n            return apology(\"invalid symbol\", 400)\n\n        # Check if shares was a positive integer\n        try:\n            shares = int(request.form.get(\"shares\"))\n        except:\n            return apology(\"shares must be a positive integer\", 400)\n\n        # Check if # of shares requested was 0\n        if shares <= 0:\n            return apology(\"can't sell less than or 0 shares\", 400)\n\n        # Check if we have enough shares\n        stock = db.execute(\"SELECT SUM(shares) as total_shares FROM transactions WHERE user_id = :user_id AND symbol = :symbol GROUP BY symbol\",\n                           user_id=session[\"user_id\"], symbol=request.form.get(\"symbol\"))\n\n        if len(stock) != 1 or stock[0][\"total_shares\"] <= 0 or stock[0][\"total_shares\"] < shares:\n            return apology(\"you can't sell less than 0 or more than you own\", 400)\n\n        # Query database for username\n        rows = db.execute(\"SELECT cash FROM users WHERE id = :user_id\", user_id=session[\"user_id\"])\n\n        # How much $$$ the user still has in her account\n        cash_remaining = rows[0][\"cash\"]\n        price_per_share = quote[\"price\"]\n\n        # Calculate the price of requested shares\n        total_price = price_per_share * shares\n\n        # Book keeping (TODO: should be wrapped with a transaction)\n        db.execute(\"UPDATE users SET cash = cash + :price WHERE id = :user_id\", price=total_price, user_id=session[\"user_id\"])\n        db.execute(\"INSERT INTO transactions (user_id, symbol, shares, price_per_share) VALUES(:user_id, :symbol, :shares, :price)\",\n                   user_id=session[\"user_id\"],\n                   symbol=request.form.get(\"symbol\"),\n                   shares=-shares,\n                   price=price_per_share)\n\n        flash(\"Sold!\")\n\n        return redirect(url_for(\"index\"))\n\n    else:\n        stocks = db.execute(\n            \"SELECT symbol, SUM(shares) as total_shares FROM transactions WHERE user_id = :user_id GROUP BY symbol HAVING total_shares > 0\", user_id=session[\"user_id\"])\n\n        return render_template(\"sell.html\", stocks=stocks)\n\n\ndef errorhandler(e):\n    \"\"\"Handle error\"\"\"\n    return apology(e.name, e.code)\n\n\n# listen for errors\nfor code in default_exceptions:\n    app.errorhandler(code)(errorhandler)\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":3000,"scrollleft":0,"selection":{"start":{"row":348,"column":40},"end":{"row":348,"column":40},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":213,"state":"start","mode":"ace/mode/python"}},"timestamp":1550343889942}